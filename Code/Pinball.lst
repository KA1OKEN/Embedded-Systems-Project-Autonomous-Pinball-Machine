;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/5/2023 12:41:32 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2BAA      	GOTO       938
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0003	0x0000      	NOP
0x0004	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x0005	0x0008      	RETURN
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0006	0x300F      	MOVLW      15
0x0007	0x1283      	BCF        STATUS, 5
0x0008	0x1303      	BCF        STATUS, 6
0x0009	0x00FC      	MOVWF      R12
0x000A	0x3047      	MOVLW      71
0x000B	0x00FD      	MOVWF      R13
L_Delay_5500us5:
0x000C	0x0BFD      	DECFSZ     R13, 1
0x000D	0x280C      	GOTO       L_Delay_5500us5
0x000E	0x0BFC      	DECFSZ     R12, 1
0x000F	0x280C      	GOTO       L_Delay_5500us5
0x0010	0x0000      	NOP
0x0011	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x0012	0x0008      	RETURN
; end of _Delay_5500us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0013	0x3021      	MOVLW      33
0x0014	0x1283      	BCF        STATUS, 5
0x0015	0x1303      	BCF        STATUS, 6
0x0016	0x00FD      	MOVWF      R13
L_Delay_50us2:
0x0017	0x0BFD      	DECFSZ     R13, 1
0x0018	0x2817      	GOTO       L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x0019	0x0008      	RETURN
; end of _Delay_50us
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x001A	0x1683      	BSF        STATUS, 5
0x001B	0x1303      	BCF        STATUS, 6
0x001C	0x1BAC      	BTFSC      FARG_Lcd_Cmd_out_char, 7
0x001D	0x2821      	GOTO       L__Lcd_Cmd21
0x001E	0x1283      	BCF        STATUS, 5
0x001F	0x1188      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x0020	0x2823      	GOTO       L__Lcd_Cmd22
L__Lcd_Cmd21:
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x1588      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x0023	0x1683      	BSF        STATUS, 5
0x0024	0x1B2C      	BTFSC      FARG_Lcd_Cmd_out_char, 6
0x0025	0x2829      	GOTO       L__Lcd_Cmd23
0x0026	0x1283      	BCF        STATUS, 5
0x0027	0x1108      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x0028	0x282B      	GOTO       L__Lcd_Cmd24
L__Lcd_Cmd23:
0x0029	0x1283      	BCF        STATUS, 5
0x002A	0x1508      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x002B	0x1683      	BSF        STATUS, 5
0x002C	0x1AAC      	BTFSC      FARG_Lcd_Cmd_out_char, 5
0x002D	0x2831      	GOTO       L__Lcd_Cmd25
0x002E	0x1283      	BCF        STATUS, 5
0x002F	0x1088      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x0030	0x2833      	GOTO       L__Lcd_Cmd26
L__Lcd_Cmd25:
0x0031	0x1283      	BCF        STATUS, 5
0x0032	0x1488      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x0033	0x1683      	BSF        STATUS, 5
0x0034	0x1A2C      	BTFSC      FARG_Lcd_Cmd_out_char, 4
0x0035	0x2839      	GOTO       L__Lcd_Cmd27
0x0036	0x1283      	BCF        STATUS, 5
0x0037	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x0038	0x283B      	GOTO       L__Lcd_Cmd28
L__Lcd_Cmd27:
0x0039	0x1283      	BCF        STATUS, 5
0x003A	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x003B	0x1860      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x003C	0x283F      	GOTO       L__Lcd_Cmd29
0x003D	0x1608      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x003E	0x2840      	GOTO       L__Lcd_Cmd30
L__Lcd_Cmd29:
0x003F	0x1208      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x0040	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,29 :: 		
0x0041	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x0042	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,33 :: 		
0x0043	0x1683      	BSF        STATUS, 5
0x0044	0x19AC      	BTFSC      FARG_Lcd_Cmd_out_char, 3
0x0045	0x2849      	GOTO       L__Lcd_Cmd31
0x0046	0x1283      	BCF        STATUS, 5
0x0047	0x1188      	BCF        LCD_D7, BitPos(LCD_D7+0)
0x0048	0x284B      	GOTO       L__Lcd_Cmd32
L__Lcd_Cmd31:
0x0049	0x1283      	BCF        STATUS, 5
0x004A	0x1588      	BSF        LCD_D7, BitPos(LCD_D7+0)
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x004B	0x1683      	BSF        STATUS, 5
0x004C	0x192C      	BTFSC      FARG_Lcd_Cmd_out_char, 2
0x004D	0x2851      	GOTO       L__Lcd_Cmd33
0x004E	0x1283      	BCF        STATUS, 5
0x004F	0x1108      	BCF        LCD_D6, BitPos(LCD_D6+0)
0x0050	0x2853      	GOTO       L__Lcd_Cmd34
L__Lcd_Cmd33:
0x0051	0x1283      	BCF        STATUS, 5
0x0052	0x1508      	BSF        LCD_D6, BitPos(LCD_D6+0)
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x0053	0x1683      	BSF        STATUS, 5
0x0054	0x18AC      	BTFSC      FARG_Lcd_Cmd_out_char, 1
0x0055	0x2859      	GOTO       L__Lcd_Cmd35
0x0056	0x1283      	BCF        STATUS, 5
0x0057	0x1088      	BCF        LCD_D5, BitPos(LCD_D5+0)
0x0058	0x285B      	GOTO       L__Lcd_Cmd36
L__Lcd_Cmd35:
0x0059	0x1283      	BCF        STATUS, 5
0x005A	0x1488      	BSF        LCD_D5, BitPos(LCD_D5+0)
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x005B	0x1683      	BSF        STATUS, 5
0x005C	0x182C      	BTFSC      FARG_Lcd_Cmd_out_char, 0
0x005D	0x2861      	GOTO       L__Lcd_Cmd37
0x005E	0x1283      	BCF        STATUS, 5
0x005F	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
0x0060	0x2863      	GOTO       L__Lcd_Cmd38
L__Lcd_Cmd37:
0x0061	0x1283      	BCF        STATUS, 5
0x0062	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x0063	0x1860      	BTFSC      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x0064	0x2867      	GOTO       L__Lcd_Cmd39
0x0065	0x1608      	BSF        LCD_RS, BitPos(LCD_RS+0)
0x0066	0x2868      	GOTO       L__Lcd_Cmd40
L__Lcd_Cmd39:
0x0067	0x1208      	BCF        LCD_RS, BitPos(LCD_RS+0)
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x0068	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,41 :: 		
0x0069	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x006A	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,44 :: 		
0x006B	0x1C60      	BTFSS      __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
0x006C	0x286F      	GOTO       L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x006D	0x2006      	CALL       _Delay_5500us
0x006E	0x2870      	GOTO       L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x006F	0x2013      	CALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x0070	0x0008      	RETURN
; end of _Lcd_Cmd
_Lcd_Chr_CP:
;__Lib_Lcd.c,50 :: 		
;__Lib_Lcd.c,52 :: 		
0x0071	0x1283      	BCF        STATUS, 5
0x0072	0x1303      	BCF        STATUS, 6
0x0073	0x1060      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,53 :: 		
0x0074	0x1683      	BSF        STATUS, 5
0x0075	0x082B      	MOVF       FARG_Lcd_Chr_CP_out_char, 0
0x0076	0x00AC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0077	0x201A      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,54 :: 		
0x0078	0x1460      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,55 :: 		
L_end_Lcd_Chr_CP:
0x0079	0x0008      	RETURN
; end of _Lcd_Chr_CP
_Div_16X16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x007A	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x007B	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x007C	0x01F8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x007D	0x01F9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x007E	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x007F	0x00FC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x0080	0x0D71      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x0081	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x0082	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x0083	0x0874      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x0084	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x0085	0x0875      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x0086	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x0087	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x0088	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x0089	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x008A	0x2892      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x008B	0x0874      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x008C	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x008D	0x0875      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x008E	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x008F	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x0090	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x0091	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x0092	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x0093	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x0094	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x0095	0x2880      	GOTO       $-21
;__Lib_Math.c,251 :: 		
L_end_Div_16X16_U:
0x0096	0x0008      	RETURN
; end of _Div_16X16_U
_intToStr:
;Pinball.c,82 :: 		void intToStr(unsigned int num, unsigned char* str) {
;Pinball.c,83 :: 		unsigned int i = 0;
0x0097	0x1683      	BSF        STATUS, 5
0x0098	0x1303      	BCF        STATUS, 6
0x0099	0x01A8      	CLRF       intToStr_i_L0
0x009A	0x01A9      	CLRF       intToStr_i_L0+1
;Pinball.c,85 :: 		do {
L_intToStr8:
0x009B	0x1683      	BSF        STATUS, 5
;Pinball.c,86 :: 		str[i++] = '0' + num % 10;
0x009C	0x0828      	MOVF       intToStr_i_L0, 0
0x009D	0x1283      	BCF        STATUS, 5
0x009E	0x076E      	ADDWF      FARG_intToStr_str, 0
0x009F	0x1683      	BSF        STATUS, 5
0x00A0	0x00AA      	MOVWF      FLOC__intToStr
0x00A1	0x300A      	MOVLW      10
0x00A2	0x00F4      	MOVWF      R4
0x00A3	0x3000      	MOVLW      0
0x00A4	0x00F5      	MOVWF      R4+1
0x00A5	0x1283      	BCF        STATUS, 5
0x00A6	0x086C      	MOVF       FARG_intToStr_num, 0
0x00A7	0x00F0      	MOVWF      R0
0x00A8	0x086D      	MOVF       FARG_intToStr_num+1, 0
0x00A9	0x00F1      	MOVWF      R0+1
0x00AA	0x207A      	CALL       _Div_16X16_U
0x00AB	0x0878      	MOVF       R8, 0
0x00AC	0x00F0      	MOVWF      R0
0x00AD	0x0879      	MOVF       R8+1, 0
0x00AE	0x00F1      	MOVWF      R0+1
0x00AF	0x3030      	MOVLW      48
0x00B0	0x07F0      	ADDWF      R0, 1
0x00B1	0x1683      	BSF        STATUS, 5
0x00B2	0x082A      	MOVF       FLOC__intToStr, 0
0x00B3	0x0084      	MOVWF      FSR
0x00B4	0x0870      	MOVF       R0, 0
0x00B5	0x0080      	MOVWF      INDF
0x00B6	0x0AA8      	INCF       intToStr_i_L0, 1
0x00B7	0x1903      	BTFSC      STATUS, 2
0x00B8	0x0AA9      	INCF       intToStr_i_L0+1, 1
;Pinball.c,87 :: 		num /= 10;
0x00B9	0x300A      	MOVLW      10
0x00BA	0x00F4      	MOVWF      R4
0x00BB	0x3000      	MOVLW      0
0x00BC	0x00F5      	MOVWF      R4+1
0x00BD	0x1283      	BCF        STATUS, 5
0x00BE	0x086C      	MOVF       FARG_intToStr_num, 0
0x00BF	0x00F0      	MOVWF      R0
0x00C0	0x086D      	MOVF       FARG_intToStr_num+1, 0
0x00C1	0x00F1      	MOVWF      R0+1
0x00C2	0x207A      	CALL       _Div_16X16_U
0x00C3	0x0870      	MOVF       R0, 0
0x00C4	0x00EC      	MOVWF      FARG_intToStr_num
0x00C5	0x0871      	MOVF       R0+1, 0
0x00C6	0x00ED      	MOVWF      FARG_intToStr_num+1
;Pinball.c,88 :: 		} while(num);
0x00C7	0x0870      	MOVF       R0, 0
0x00C8	0x0471      	IORWF      R0+1, 0
0x00C9	0x1D03      	BTFSS      STATUS, 2
0x00CA	0x289B      	GOTO       L_intToStr8
;Pinball.c,91 :: 		for(j = 0; j < i / 2; j++) {  // Use j without declaring it again
0x00CB	0x1683      	BSF        STATUS, 5
0x00CC	0x01A6      	CLRF       intToStr_j_L0
0x00CD	0x01A7      	CLRF       intToStr_j_L0+1
L_intToStr11:
0x00CE	0x0828      	MOVF       intToStr_i_L0, 0
0x00CF	0x00F1      	MOVWF      R1
0x00D0	0x0829      	MOVF       intToStr_i_L0+1, 0
0x00D1	0x00F2      	MOVWF      R1+1
0x00D2	0x0CF2      	RRF        R1+1, 1
0x00D3	0x0CF1      	RRF        R1, 1
0x00D4	0x13F2      	BCF        R1+1, 7
0x00D5	0x0872      	MOVF       R1+1, 0
0x00D6	0x0227      	SUBWF      intToStr_j_L0+1, 0
0x00D7	0x1D03      	BTFSS      STATUS, 2
0x00D8	0x28DB      	GOTO       L__intToStr57
0x00D9	0x0871      	MOVF       R1, 0
0x00DA	0x0226      	SUBWF      intToStr_j_L0, 0
L__intToStr57:
0x00DB	0x1803      	BTFSC      STATUS, 0
0x00DC	0x2914      	GOTO       L_intToStr12
;Pinball.c,92 :: 		unsigned char temp = str[j];
0x00DD	0x0826      	MOVF       intToStr_j_L0, 0
0x00DE	0x1283      	BCF        STATUS, 5
0x00DF	0x076E      	ADDWF      FARG_intToStr_str, 0
0x00E0	0x00F2      	MOVWF      R2
0x00E1	0x0872      	MOVF       R2, 0
0x00E2	0x0084      	MOVWF      FSR
0x00E3	0x0800      	MOVF       INDF, 0
0x00E4	0x00EF      	MOVWF      intToStr_temp_L1
;Pinball.c,93 :: 		str[j] = str[i - j - 1];
0x00E5	0x1683      	BSF        STATUS, 5
0x00E6	0x0826      	MOVF       intToStr_j_L0, 0
0x00E7	0x0228      	SUBWF      intToStr_i_L0, 0
0x00E8	0x00F0      	MOVWF      R0
0x00E9	0x0827      	MOVF       intToStr_j_L0+1, 0
0x00EA	0x1C03      	BTFSS      STATUS, 0
0x00EB	0x3E01      	ADDLW      1
0x00EC	0x0229      	SUBWF      intToStr_i_L0+1, 0
0x00ED	0x00F1      	MOVWF      R0+1
0x00EE	0x3001      	MOVLW      1
0x00EF	0x02F0      	SUBWF      R0, 1
0x00F0	0x1C03      	BTFSS      STATUS, 0
0x00F1	0x03F1      	DECF       R0+1, 1
0x00F2	0x0870      	MOVF       R0, 0
0x00F3	0x1283      	BCF        STATUS, 5
0x00F4	0x076E      	ADDWF      FARG_intToStr_str, 0
0x00F5	0x0084      	MOVWF      FSR
0x00F6	0x0800      	MOVF       INDF, 0
0x00F7	0x00F0      	MOVWF      R0
0x00F8	0x0872      	MOVF       R2, 0
0x00F9	0x0084      	MOVWF      FSR
0x00FA	0x0870      	MOVF       R0, 0
0x00FB	0x0080      	MOVWF      INDF
;Pinball.c,94 :: 		str[i - j - 1] = temp;
0x00FC	0x1683      	BSF        STATUS, 5
0x00FD	0x0826      	MOVF       intToStr_j_L0, 0
0x00FE	0x0228      	SUBWF      intToStr_i_L0, 0
0x00FF	0x00F0      	MOVWF      R0
0x0100	0x0827      	MOVF       intToStr_j_L0+1, 0
0x0101	0x1C03      	BTFSS      STATUS, 0
0x0102	0x3E01      	ADDLW      1
0x0103	0x0229      	SUBWF      intToStr_i_L0+1, 0
0x0104	0x00F1      	MOVWF      R0+1
0x0105	0x3001      	MOVLW      1
0x0106	0x02F0      	SUBWF      R0, 1
0x0107	0x1C03      	BTFSS      STATUS, 0
0x0108	0x03F1      	DECF       R0+1, 1
0x0109	0x0870      	MOVF       R0, 0
0x010A	0x1283      	BCF        STATUS, 5
0x010B	0x076E      	ADDWF      FARG_intToStr_str, 0
0x010C	0x0084      	MOVWF      FSR
0x010D	0x086F      	MOVF       intToStr_temp_L1, 0
0x010E	0x0080      	MOVWF      INDF
;Pinball.c,91 :: 		for(j = 0; j < i / 2; j++) {  // Use j without declaring it again
0x010F	0x1683      	BSF        STATUS, 5
0x0110	0x0AA6      	INCF       intToStr_j_L0, 1
0x0111	0x1903      	BTFSC      STATUS, 2
0x0112	0x0AA7      	INCF       intToStr_j_L0+1, 1
;Pinball.c,95 :: 		}
0x0113	0x28CE      	GOTO       L_intToStr11
L_intToStr12:
;Pinball.c,98 :: 		str[i] = '\0';
0x0114	0x0828      	MOVF       intToStr_i_L0, 0
0x0115	0x1283      	BCF        STATUS, 5
0x0116	0x076E      	ADDWF      FARG_intToStr_str, 0
0x0117	0x0084      	MOVWF      FSR
0x0118	0x0180      	CLRF       INDF
;Pinball.c,99 :: 		}
L_end_intToStr:
0x0119	0x0008      	RETURN
; end of _intToStr
_Lcd_Out:
;__Lib_Lcd.c,184 :: 		
;__Lib_Lcd.c,187 :: 		
0x011A	0x292C      	GOTO       L_Lcd_Out11
;__Lib_Lcd.c,188 :: 		
L_Lcd_Out13:
0x011B	0x3080      	MOVLW      128
0x011C	0x1283      	BCF        STATUS, 5
0x011D	0x1303      	BCF        STATUS, 6
0x011E	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x011F	0x293F      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,189 :: 		
L_Lcd_Out14:
0x0120	0x30C0      	MOVLW      192
0x0121	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x0122	0x293F      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,190 :: 		
L_Lcd_Out15:
0x0123	0x3094      	MOVLW      148
0x0124	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x0125	0x293F      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,191 :: 		
L_Lcd_Out16:
0x0126	0x30D4      	MOVLW      212
0x0127	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x0128	0x293F      	GOTO       L_Lcd_Out12
;__Lib_Lcd.c,192 :: 		
L_Lcd_Out17:
0x0129	0x3080      	MOVLW      128
0x012A	0x00EC      	MOVWF      FARG_Lcd_Out_row
;__Lib_Lcd.c,193 :: 		
0x012B	0x293F      	GOTO       L_Lcd_Out12
L_Lcd_Out11:
0x012C	0x1283      	BCF        STATUS, 5
0x012D	0x1303      	BCF        STATUS, 6
0x012E	0x086C      	MOVF       FARG_Lcd_Out_row, 0
0x012F	0x3A01      	XORLW      1
0x0130	0x1903      	BTFSC      STATUS, 2
0x0131	0x291B      	GOTO       L_Lcd_Out13
0x0132	0x086C      	MOVF       FARG_Lcd_Out_row, 0
0x0133	0x3A02      	XORLW      2
0x0134	0x1903      	BTFSC      STATUS, 2
0x0135	0x2920      	GOTO       L_Lcd_Out14
0x0136	0x086C      	MOVF       FARG_Lcd_Out_row, 0
0x0137	0x3A03      	XORLW      3
0x0138	0x1903      	BTFSC      STATUS, 2
0x0139	0x2923      	GOTO       L_Lcd_Out15
0x013A	0x086C      	MOVF       FARG_Lcd_Out_row, 0
0x013B	0x3A04      	XORLW      4
0x013C	0x1903      	BTFSC      STATUS, 2
0x013D	0x2926      	GOTO       L_Lcd_Out16
0x013E	0x2929      	GOTO       L_Lcd_Out17
L_Lcd_Out12:
;__Lib_Lcd.c,194 :: 		
0x013F	0x036D      	DECF       FARG_Lcd_Out_column, 0
0x0140	0x00F0      	MOVWF      R0
0x0141	0x086C      	MOVF       FARG_Lcd_Out_row, 0
0x0142	0x07F0      	ADDWF      R0, 1
0x0143	0x0870      	MOVF       R0, 0
0x0144	0x00EC      	MOVWF      FARG_Lcd_Out_row
;__Lib_Lcd.c,196 :: 		
0x0145	0x0870      	MOVF       R0, 0
0x0146	0x1683      	BSF        STATUS, 5
0x0147	0x00AC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0148	0x201A      	CALL       _Lcd_Cmd
;__Lib_Lcd.c,197 :: 		
0x0149	0x1060      	BCF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,198 :: 		
0x014A	0x01EF      	CLRF       Lcd_Out_i_L0
;__Lib_Lcd.c,199 :: 		
L_Lcd_Out18:
0x014B	0x086F      	MOVF       Lcd_Out_i_L0, 0
0x014C	0x076E      	ADDWF      FARG_Lcd_Out_text, 0
0x014D	0x0084      	MOVWF      FSR
0x014E	0x0800      	MOVF       INDF, 0
0x014F	0x1903      	BTFSC      STATUS, 2
0x0150	0x295A      	GOTO       L_Lcd_Out19
;__Lib_Lcd.c,200 :: 		
0x0151	0x086F      	MOVF       Lcd_Out_i_L0, 0
0x0152	0x076E      	ADDWF      FARG_Lcd_Out_text, 0
0x0153	0x0084      	MOVWF      FSR
0x0154	0x0800      	MOVF       INDF, 0
0x0155	0x1683      	BSF        STATUS, 5
0x0156	0x00AB      	MOVWF      FARG_Lcd_Chr_CP_out_char
0x0157	0x2071      	CALL       _Lcd_Chr_CP
0x0158	0x0AEF      	INCF       Lcd_Out_i_L0, 1
0x0159	0x294B      	GOTO       L_Lcd_Out18
L_Lcd_Out19:
;__Lib_Lcd.c,201 :: 		
0x015A	0x1460      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,202 :: 		
L_end_Lcd_Out:
0x015B	0x0008      	RETURN
; end of _Lcd_Out
_EEPROM_Write:
;__Lib_EEPROM.c,16 :: 		
;__Lib_EEPROM.c,20 :: 		
L_EEPROM_Write0:
0x015C	0x1683      	BSF        STATUS, 5
0x015D	0x1703      	BSF        STATUS, 6
0x015E	0x1C8C      	BTFSS      EECON1, 1
0x015F	0x2962      	GOTO       L_EEPROM_Write1
0x0160	0x0000      	NOP
0x0161	0x295C      	GOTO       L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM.c,21 :: 		
0x0162	0x1283      	BCF        STATUS, 5
0x0163	0x1303      	BCF        STATUS, 6
0x0164	0x0866      	MOVF       FARG_EEPROM_Write_Address, 0
0x0165	0x1703      	BSF        STATUS, 6
0x0166	0x008D      	MOVWF      EEADR
;__Lib_EEPROM.c,22 :: 		
0x0167	0x1303      	BCF        STATUS, 6
0x0168	0x0867      	MOVF       FARG_EEPROM_Write_data_, 0
0x0169	0x1703      	BSF        STATUS, 6
0x016A	0x008C      	MOVWF      EEDATA
;__Lib_EEPROM.c,23 :: 		
0x016B	0x1683      	BSF        STATUS, 5
0x016C	0x138C      	BCF        EECON1, 7
;__Lib_EEPROM.c,24 :: 		
0x016D	0x150C      	BSF        EECON1, 2
;__Lib_EEPROM.c,26 :: 		
0x016E	0x080B      	MOVF       INTCON, 0
0x016F	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,29 :: 		
0x0170	0x138B      	BCF        INTCON, 7
;__Lib_EEPROM.c,30 :: 		
0x0171	0x3055      	MOVLW      85
0x0172	0x008D      	MOVWF      EECON2
;__Lib_EEPROM.c,31 :: 		
0x0173	0x30AA      	MOVLW      170
0x0174	0x008D      	MOVWF      EECON2
;__Lib_EEPROM.c,32 :: 		
0x0175	0x148C      	BSF        EECON1, 1
;__Lib_EEPROM.c,36 :: 		
0x0176	0x1BF0      	BTFSC      R0, 7
0x0177	0x297A      	GOTO       L__EEPROM_Write4
0x0178	0x138B      	BCF        INTCON, 7
0x0179	0x297B      	GOTO       L__EEPROM_Write5
L__EEPROM_Write4:
0x017A	0x178B      	BSF        INTCON, 7
L__EEPROM_Write5:
;__Lib_EEPROM.c,37 :: 		
0x017B	0x110C      	BCF        EECON1, 2
;__Lib_EEPROM.c,38 :: 		
L_end_EEPROM_Write:
0x017C	0x0008      	RETURN
; end of _EEPROM_Write
_updateLCD:
;Pinball.c,102 :: 		void updateLCD() {
;Pinball.c,107 :: 		Lcd_Cmd(_LCD_CLEAR);
0x017D	0x3001      	MOVLW      1
0x017E	0x1683      	BSF        STATUS, 5
0x017F	0x1303      	BCF        STATUS, 6
0x0180	0x00AC      	MOVWF      FARG_Lcd_Cmd_out_char
0x0181	0x201A      	CALL       _Lcd_Cmd
;Pinball.c,109 :: 		intToStr(currentScore, scoreStr);
0x0182	0x0820      	MOVF       _currentScore, 0
0x0183	0x00EC      	MOVWF      FARG_intToStr_num
0x0184	0x0821      	MOVF       _currentScore+1, 0
0x0185	0x00ED      	MOVWF      FARG_intToStr_num+1
0x0186	0x3066      	MOVLW      updateLCD_scoreStr_L0
0x0187	0x00EE      	MOVWF      FARG_intToStr_str
0x0188	0x2097      	CALL       _intToStr
;Pinball.c,110 :: 		intToStr(highScore, highScoreStr);
0x0189	0x0851      	MOVF       _highScore, 0
0x018A	0x00EC      	MOVWF      FARG_intToStr_num
0x018B	0x0852      	MOVF       _highScore+1, 0
0x018C	0x00ED      	MOVWF      FARG_intToStr_num+1
0x018D	0x30A0      	MOVLW      updateLCD_highScoreStr_L0
0x018E	0x00EE      	MOVWF      FARG_intToStr_str
0x018F	0x2097      	CALL       _intToStr
;Pinball.c,113 :: 		Lcd_Out(1, 1, "Score: ");
0x0190	0x3001      	MOVLW      1
0x0191	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x0192	0x3001      	MOVLW      1
0x0193	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x0194	0x3022      	MOVLW      ?lstr1_Pinball
0x0195	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x0196	0x211A      	CALL       _Lcd_Out
;Pinball.c,114 :: 		Lcd_Out(1, 8, scoreStr);  // Adjusted column index
0x0197	0x3001      	MOVLW      1
0x0198	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x0199	0x3008      	MOVLW      8
0x019A	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x019B	0x3066      	MOVLW      updateLCD_scoreStr_L0
0x019C	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x019D	0x211A      	CALL       _Lcd_Out
;Pinball.c,117 :: 		Lcd_Out(2, 1, "High Score: ");
0x019E	0x3002      	MOVLW      2
0x019F	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x01A0	0x3001      	MOVLW      1
0x01A1	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x01A2	0x302A      	MOVLW      ?lstr2_Pinball
0x01A3	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x01A4	0x211A      	CALL       _Lcd_Out
;Pinball.c,118 :: 		Lcd_Out(2, 13, highScoreStr);  // Adjusted column index
0x01A5	0x3002      	MOVLW      2
0x01A6	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x01A7	0x300D      	MOVLW      13
0x01A8	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x01A9	0x30A0      	MOVLW      updateLCD_highScoreStr_L0
0x01AA	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x01AB	0x211A      	CALL       _Lcd_Out
;Pinball.c,119 :: 		}
L_end_updateLCD:
0x01AC	0x0008      	RETURN
; end of _updateLCD
_set_servo_position1:
;Pinball.c,218 :: 		void set_servo_position1(int degrees) {
;Pinball.c,219 :: 		int pulse_width = (degrees + 90) * 8 + 500; // Calculate pulse width (500 to 2400)
0x01AD	0x305A      	MOVLW      90
0x01AE	0x1283      	BCF        STATUS, 5
0x01AF	0x1303      	BCF        STATUS, 6
0x01B0	0x0764      	ADDWF      FARG_set_servo_position1_degrees, 0
0x01B1	0x00F3      	MOVWF      R3
0x01B2	0x0865      	MOVF       FARG_set_servo_position1_degrees+1, 0
0x01B3	0x1803      	BTFSC      STATUS, 0
0x01B4	0x3E01      	ADDLW      1
0x01B5	0x00F4      	MOVWF      R3+1
0x01B6	0x3003      	MOVLW      3
0x01B7	0x00F2      	MOVWF      R2
0x01B8	0x0873      	MOVF       R3, 0
0x01B9	0x00F0      	MOVWF      R0
0x01BA	0x0874      	MOVF       R3+1, 0
0x01BB	0x00F1      	MOVWF      R0+1
0x01BC	0x0872      	MOVF       R2, 0
L__set_servo_position167:
0x01BD	0x1903      	BTFSC      STATUS, 2
0x01BE	0x29C4      	GOTO       L__set_servo_position168
0x01BF	0x0DF0      	RLF        R0, 1
0x01C0	0x0DF1      	RLF        R0+1, 1
0x01C1	0x1070      	BCF        R0, 0
0x01C2	0x3EFF      	ADDLW      255
0x01C3	0x29BD      	GOTO       L__set_servo_position167
L__set_servo_position168:
0x01C4	0x30F4      	MOVLW      244
0x01C5	0x0770      	ADDWF      R0, 0
0x01C6	0x00F3      	MOVWF      R3
0x01C7	0x0871      	MOVF       R0+1, 0
0x01C8	0x1803      	BTFSC      STATUS, 0
0x01C9	0x3E01      	ADDLW      1
0x01CA	0x3E01      	ADDLW      1
0x01CB	0x00F4      	MOVWF      R3+1
;Pinball.c,220 :: 		CCPR1L = pulse_width >> 2; // Set CCPR1L register
0x01CC	0x0873      	MOVF       R3, 0
0x01CD	0x00F0      	MOVWF      R0
0x01CE	0x0874      	MOVF       R3+1, 0
0x01CF	0x00F1      	MOVWF      R0+1
0x01D0	0x0CF1      	RRF        R0+1, 1
0x01D1	0x0CF0      	RRF        R0, 1
0x01D2	0x13F1      	BCF        R0+1, 7
0x01D3	0x1B71      	BTFSC      R0+1, 6
0x01D4	0x17F1      	BSF        R0+1, 7
0x01D5	0x0CF1      	RRF        R0+1, 1
0x01D6	0x0CF0      	RRF        R0, 1
0x01D7	0x13F1      	BCF        R0+1, 7
0x01D8	0x1B71      	BTFSC      R0+1, 6
0x01D9	0x17F1      	BSF        R0+1, 7
0x01DA	0x0870      	MOVF       R0, 0
0x01DB	0x0095      	MOVWF      CCPR1L
;Pinball.c,221 :: 		CCP1CON = (CCP1CON & 0xCF) | ((pulse_width & 0x03) << 4); // Set CCP1CON register
0x01DC	0x30CF      	MOVLW      207
0x01DD	0x0517      	ANDWF      CCP1CON, 0
0x01DE	0x00F5      	MOVWF      R5
0x01DF	0x3003      	MOVLW      3
0x01E0	0x0573      	ANDWF      R3, 0
0x01E1	0x00F2      	MOVWF      R2
0x01E2	0x0872      	MOVF       R2, 0
0x01E3	0x00F0      	MOVWF      R0
0x01E4	0x0DF0      	RLF        R0, 1
0x01E5	0x1070      	BCF        R0, 0
0x01E6	0x0DF0      	RLF        R0, 1
0x01E7	0x1070      	BCF        R0, 0
0x01E8	0x0DF0      	RLF        R0, 1
0x01E9	0x1070      	BCF        R0, 0
0x01EA	0x0DF0      	RLF        R0, 1
0x01EB	0x1070      	BCF        R0, 0
0x01EC	0x0870      	MOVF       R0, 0
0x01ED	0x0475      	IORWF      R5, 0
0x01EE	0x0097      	MOVWF      CCP1CON
;Pinball.c,222 :: 		Delay_ms(50*4); // Delay for the servo to reach the desired position
0x01EF	0x3003      	MOVLW      3
0x01F0	0x00FB      	MOVWF      R11
0x01F1	0x3008      	MOVLW      8
0x01F2	0x00FC      	MOVWF      R12
0x01F3	0x3077      	MOVLW      119
0x01F4	0x00FD      	MOVWF      R13
L_set_servo_position138:
0x01F5	0x0BFD      	DECFSZ     R13, 1
0x01F6	0x29F5      	GOTO       L_set_servo_position138
0x01F7	0x0BFC      	DECFSZ     R12, 1
0x01F8	0x29F5      	GOTO       L_set_servo_position138
0x01F9	0x0BFB      	DECFSZ     R11, 1
0x01FA	0x29F5      	GOTO       L_set_servo_position138
;Pinball.c,223 :: 		}
L_end_set_servo_position1:
0x01FB	0x0008      	RETURN
; end of _set_servo_position1
_set_servo_position2:
;Pinball.c,225 :: 		void set_servo_position2(int degrees) {
;Pinball.c,226 :: 		int pulse_width = (degrees + 90) * 8 + 500; // Calculate pulse width (500 to 2400)
0x01FC	0x305A      	MOVLW      90
0x01FD	0x1283      	BCF        STATUS, 5
0x01FE	0x1303      	BCF        STATUS, 6
0x01FF	0x0764      	ADDWF      FARG_set_servo_position2_degrees, 0
0x0200	0x00F3      	MOVWF      R3
0x0201	0x0865      	MOVF       FARG_set_servo_position2_degrees+1, 0
0x0202	0x1803      	BTFSC      STATUS, 0
0x0203	0x3E01      	ADDLW      1
0x0204	0x00F4      	MOVWF      R3+1
0x0205	0x3003      	MOVLW      3
0x0206	0x00F2      	MOVWF      R2
0x0207	0x0873      	MOVF       R3, 0
0x0208	0x00F0      	MOVWF      R0
0x0209	0x0874      	MOVF       R3+1, 0
0x020A	0x00F1      	MOVWF      R0+1
0x020B	0x0872      	MOVF       R2, 0
L__set_servo_position270:
0x020C	0x1903      	BTFSC      STATUS, 2
0x020D	0x2A13      	GOTO       L__set_servo_position271
0x020E	0x0DF0      	RLF        R0, 1
0x020F	0x0DF1      	RLF        R0+1, 1
0x0210	0x1070      	BCF        R0, 0
0x0211	0x3EFF      	ADDLW      255
0x0212	0x2A0C      	GOTO       L__set_servo_position270
L__set_servo_position271:
0x0213	0x30F4      	MOVLW      244
0x0214	0x0770      	ADDWF      R0, 0
0x0215	0x00F3      	MOVWF      R3
0x0216	0x0871      	MOVF       R0+1, 0
0x0217	0x1803      	BTFSC      STATUS, 0
0x0218	0x3E01      	ADDLW      1
0x0219	0x3E01      	ADDLW      1
0x021A	0x00F4      	MOVWF      R3+1
;Pinball.c,227 :: 		CCPR2L = pulse_width >> 2; // Set CCPR2L register
0x021B	0x0873      	MOVF       R3, 0
0x021C	0x00F0      	MOVWF      R0
0x021D	0x0874      	MOVF       R3+1, 0
0x021E	0x00F1      	MOVWF      R0+1
0x021F	0x0CF1      	RRF        R0+1, 1
0x0220	0x0CF0      	RRF        R0, 1
0x0221	0x13F1      	BCF        R0+1, 7
0x0222	0x1B71      	BTFSC      R0+1, 6
0x0223	0x17F1      	BSF        R0+1, 7
0x0224	0x0CF1      	RRF        R0+1, 1
0x0225	0x0CF0      	RRF        R0, 1
0x0226	0x13F1      	BCF        R0+1, 7
0x0227	0x1B71      	BTFSC      R0+1, 6
0x0228	0x17F1      	BSF        R0+1, 7
0x0229	0x0870      	MOVF       R0, 0
0x022A	0x009B      	MOVWF      CCPR2L
;Pinball.c,228 :: 		CCP2CON = (CCP2CON & 0xCF) | ((pulse_width & 0x03) << 4); // Set CCP2CON register
0x022B	0x30CF      	MOVLW      207
0x022C	0x051D      	ANDWF      CCP2CON, 0
0x022D	0x00F5      	MOVWF      R5
0x022E	0x3003      	MOVLW      3
0x022F	0x0573      	ANDWF      R3, 0
0x0230	0x00F2      	MOVWF      R2
0x0231	0x0872      	MOVF       R2, 0
0x0232	0x00F0      	MOVWF      R0
0x0233	0x0DF0      	RLF        R0, 1
0x0234	0x1070      	BCF        R0, 0
0x0235	0x0DF0      	RLF        R0, 1
0x0236	0x1070      	BCF        R0, 0
0x0237	0x0DF0      	RLF        R0, 1
0x0238	0x1070      	BCF        R0, 0
0x0239	0x0DF0      	RLF        R0, 1
0x023A	0x1070      	BCF        R0, 0
0x023B	0x0870      	MOVF       R0, 0
0x023C	0x0475      	IORWF      R5, 0
0x023D	0x009D      	MOVWF      CCP2CON
;Pinball.c,229 :: 		Delay_ms(50*4); // Delay for the servo to reach the desired position
0x023E	0x3003      	MOVLW      3
0x023F	0x00FB      	MOVWF      R11
0x0240	0x3008      	MOVLW      8
0x0241	0x00FC      	MOVWF      R12
0x0242	0x3077      	MOVLW      119
0x0243	0x00FD      	MOVWF      R13
L_set_servo_position239:
0x0244	0x0BFD      	DECFSZ     R13, 1
0x0245	0x2A44      	GOTO       L_set_servo_position239
0x0246	0x0BFC      	DECFSZ     R12, 1
0x0247	0x2A44      	GOTO       L_set_servo_position239
0x0248	0x0BFB      	DECFSZ     R11, 1
0x0249	0x2A44      	GOTO       L_set_servo_position239
;Pinball.c,230 :: 		}
L_end_set_servo_position2:
0x024A	0x0008      	RETURN
; end of _set_servo_position2
_checkSensors:
;Pinball.c,121 :: 		void checkSensors() {
;Pinball.c,127 :: 		if (PORTB & 0x01) {
0x024B	0x1283      	BCF        STATUS, 5
0x024C	0x1303      	BCF        STATUS, 6
0x024D	0x1C06      	BTFSS      PORTB, 0
0x024E	0x2A60      	GOTO       L_checkSensors14
;Pinball.c,128 :: 		if (!previousState1 && ++count1 > 2) {
0x024F	0x0853      	MOVF       _previousState1, 0
0x0250	0x1D03      	BTFSS      STATUS, 2
0x0251	0x2A5F      	GOTO       L_checkSensors17
0x0252	0x0ACE      	INCF       checkSensors_count1_L0, 1
0x0253	0x084E      	MOVF       checkSensors_count1_L0, 0
0x0254	0x3C02      	SUBLW      2
0x0255	0x1803      	BTFSC      STATUS, 0
0x0256	0x2A5F      	GOTO       L_checkSensors17
L__checkSensors54:
;Pinball.c,129 :: 		currentScore += 10;
0x0257	0x300A      	MOVLW      10
0x0258	0x07A0      	ADDWF      _currentScore, 1
0x0259	0x1803      	BTFSC      STATUS, 0
0x025A	0x0AA1      	INCF       _currentScore+1, 1
;Pinball.c,130 :: 		updateLCD();
0x025B	0x217D      	CALL       _updateLCD
;Pinball.c,131 :: 		previousState1 = 1;
0x025C	0x3001      	MOVLW      1
0x025D	0x00D3      	MOVWF      _previousState1
;Pinball.c,132 :: 		count1 = 0;
0x025E	0x01CE      	CLRF       checkSensors_count1_L0
;Pinball.c,133 :: 		}
L_checkSensors17:
;Pinball.c,134 :: 		} else {
0x025F	0x2A62      	GOTO       L_checkSensors18
L_checkSensors14:
;Pinball.c,135 :: 		count1 = 0;
0x0260	0x01CE      	CLRF       checkSensors_count1_L0
;Pinball.c,136 :: 		previousState1 = 0;
0x0261	0x01D3      	CLRF       _previousState1
;Pinball.c,137 :: 		}
L_checkSensors18:
;Pinball.c,140 :: 		if (PORTB & 0x02) {
0x0262	0x1C86      	BTFSS      PORTB, 1
0x0263	0x2A75      	GOTO       L_checkSensors19
;Pinball.c,141 :: 		if (!previousState2 && ++count2 > 2) {
0x0264	0x085F      	MOVF       _previousState2, 0
0x0265	0x1D03      	BTFSS      STATUS, 2
0x0266	0x2A74      	GOTO       L_checkSensors22
0x0267	0x0ACF      	INCF       checkSensors_count2_L0, 1
0x0268	0x084F      	MOVF       checkSensors_count2_L0, 0
0x0269	0x3C02      	SUBLW      2
0x026A	0x1803      	BTFSC      STATUS, 0
0x026B	0x2A74      	GOTO       L_checkSensors22
L__checkSensors53:
;Pinball.c,142 :: 		currentScore += 20;
0x026C	0x3014      	MOVLW      20
0x026D	0x07A0      	ADDWF      _currentScore, 1
0x026E	0x1803      	BTFSC      STATUS, 0
0x026F	0x0AA1      	INCF       _currentScore+1, 1
;Pinball.c,143 :: 		updateLCD();
0x0270	0x217D      	CALL       _updateLCD
;Pinball.c,144 :: 		previousState2 = 1;
0x0271	0x3001      	MOVLW      1
0x0272	0x00DF      	MOVWF      _previousState2
;Pinball.c,145 :: 		count2 = 0;
0x0273	0x01CF      	CLRF       checkSensors_count2_L0
;Pinball.c,146 :: 		}
L_checkSensors22:
;Pinball.c,147 :: 		} else {
0x0274	0x2A77      	GOTO       L_checkSensors23
L_checkSensors19:
;Pinball.c,148 :: 		count2 = 0;
0x0275	0x01CF      	CLRF       checkSensors_count2_L0
;Pinball.c,149 :: 		previousState2 = 0;
0x0276	0x01DF      	CLRF       _previousState2
;Pinball.c,150 :: 		}
L_checkSensors23:
;Pinball.c,153 :: 		if (PORTB & 0x04) {
0x0277	0x1D06      	BTFSS      PORTB, 2
0x0278	0x2A8A      	GOTO       L_checkSensors24
;Pinball.c,154 :: 		if (!previousState3 && ++count3 > 2) {
0x0279	0x085E      	MOVF       _previousState3, 0
0x027A	0x1D03      	BTFSS      STATUS, 2
0x027B	0x2A89      	GOTO       L_checkSensors27
0x027C	0x0AD0      	INCF       checkSensors_count3_L0, 1
0x027D	0x0850      	MOVF       checkSensors_count3_L0, 0
0x027E	0x3C02      	SUBLW      2
0x027F	0x1803      	BTFSC      STATUS, 0
0x0280	0x2A89      	GOTO       L_checkSensors27
L__checkSensors52:
;Pinball.c,155 :: 		currentScore += 30;
0x0281	0x301E      	MOVLW      30
0x0282	0x07A0      	ADDWF      _currentScore, 1
0x0283	0x1803      	BTFSC      STATUS, 0
0x0284	0x0AA1      	INCF       _currentScore+1, 1
;Pinball.c,156 :: 		updateLCD();
0x0285	0x217D      	CALL       _updateLCD
;Pinball.c,157 :: 		previousState3 = 1;
0x0286	0x3001      	MOVLW      1
0x0287	0x00DE      	MOVWF      _previousState3
;Pinball.c,158 :: 		count3 = 0;
0x0288	0x01D0      	CLRF       checkSensors_count3_L0
;Pinball.c,159 :: 		}
L_checkSensors27:
;Pinball.c,160 :: 		} else {
0x0289	0x2A8C      	GOTO       L_checkSensors28
L_checkSensors24:
;Pinball.c,161 :: 		count3 = 0;
0x028A	0x01D0      	CLRF       checkSensors_count3_L0
;Pinball.c,162 :: 		previousState3 = 0;
0x028B	0x01DE      	CLRF       _previousState3
;Pinball.c,163 :: 		}
L_checkSensors28:
;Pinball.c,165 :: 		if (currentScore > highScore) {
0x028C	0x0821      	MOVF       _currentScore+1, 0
0x028D	0x0252      	SUBWF      _highScore+1, 0
0x028E	0x1D03      	BTFSS      STATUS, 2
0x028F	0x2A92      	GOTO       L__checkSensors60
0x0290	0x0820      	MOVF       _currentScore, 0
0x0291	0x0251      	SUBWF      _highScore, 0
L__checkSensors60:
0x0292	0x1803      	BTFSC      STATUS, 0
0x0293	0x2AA7      	GOTO       L_checkSensors29
;Pinball.c,166 :: 		highScore = currentScore;
0x0294	0x0820      	MOVF       _currentScore, 0
0x0295	0x00D1      	MOVWF      _highScore
0x0296	0x0821      	MOVF       _currentScore+1, 0
0x0297	0x00D2      	MOVWF      _highScore+1
;Pinball.c,168 :: 		EEPROM_Write(0x00, highScore >> 8);  // High byte
0x0298	0x01E6      	CLRF       FARG_EEPROM_Write_Address
0x0299	0x0821      	MOVF       _currentScore+1, 0
0x029A	0x00F0      	MOVWF      R0
0x029B	0x01F1      	CLRF       R0+1
0x029C	0x0870      	MOVF       R0, 0
0x029D	0x00E7      	MOVWF      FARG_EEPROM_Write_data_
0x029E	0x215C      	CALL       _EEPROM_Write
;Pinball.c,169 :: 		EEPROM_Write(0x01, highScore & 0xFF);  // Low byte
0x029F	0x3001      	MOVLW      1
0x02A0	0x1283      	BCF        STATUS, 5
0x02A1	0x1303      	BCF        STATUS, 6
0x02A2	0x00E6      	MOVWF      FARG_EEPROM_Write_Address
0x02A3	0x30FF      	MOVLW      255
0x02A4	0x0551      	ANDWF      _highScore, 0
0x02A5	0x00E7      	MOVWF      FARG_EEPROM_Write_data_
0x02A6	0x215C      	CALL       _EEPROM_Write
;Pinball.c,170 :: 		}
L_checkSensors29:
;Pinball.c,172 :: 		updateLCD();
0x02A7	0x217D      	CALL       _updateLCD
;Pinball.c,173 :: 		}
L_end_checkSensors:
0x02A8	0x0008      	RETURN
; end of _checkSensors
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x02A9	0x1283      	BCF        STATUS, 5
0x02AA	0x1303      	BCF        STATUS, 6
0x02AB	0x0855      	MOVF       ___DoICPAddr+1, 0
0x02AC	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x02AD	0x0854      	MOVF       ___DoICPAddr, 0
0x02AE	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x02AF	0x0008      	RETURN
; end of _____DoICP
_GameOver:
;Pinball.c,175 :: 		void GameOver(){
;Pinball.c,176 :: 		Lcd_Cmd(_LCD_CLEAR);
0x02B0	0x3001      	MOVLW      1
0x02B1	0x1683      	BSF        STATUS, 5
0x02B2	0x1303      	BCF        STATUS, 6
0x02B3	0x00AC      	MOVWF      FARG_Lcd_Cmd_out_char
0x02B4	0x201A      	CALL       _Lcd_Cmd
;Pinball.c,178 :: 		intToStr(currentScore, finalScore);
0x02B5	0x0820      	MOVF       _currentScore, 0
0x02B6	0x00EC      	MOVWF      FARG_intToStr_num
0x02B7	0x0821      	MOVF       _currentScore+1, 0
0x02B8	0x00ED      	MOVWF      FARG_intToStr_num+1
0x02B9	0x3058      	MOVLW      _finalScore
0x02BA	0x00EE      	MOVWF      FARG_intToStr_str
0x02BB	0x2097      	CALL       _intToStr
;Pinball.c,180 :: 		Lcd_Out(1, 4, "GAME OVER!");
0x02BC	0x3001      	MOVLW      1
0x02BD	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x02BE	0x3004      	MOVLW      4
0x02BF	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x02C0	0x303F      	MOVLW      ?lstr3_Pinball
0x02C1	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x02C2	0x211A      	CALL       _Lcd_Out
;Pinball.c,182 :: 		Lcd_Out(2, 2, "Score: ");
0x02C3	0x3002      	MOVLW      2
0x02C4	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x02C5	0x3002      	MOVLW      2
0x02C6	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x02C7	0x3037      	MOVLW      ?lstr4_Pinball
0x02C8	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x02C9	0x211A      	CALL       _Lcd_Out
;Pinball.c,183 :: 		Lcd_Out(2, 9, finalScore);
0x02CA	0x3002      	MOVLW      2
0x02CB	0x00EC      	MOVWF      FARG_Lcd_Out_row
0x02CC	0x3009      	MOVLW      9
0x02CD	0x00ED      	MOVWF      FARG_Lcd_Out_column
0x02CE	0x3058      	MOVLW      _finalScore
0x02CF	0x00EE      	MOVWF      FARG_Lcd_Out_text
0x02D0	0x211A      	CALL       _Lcd_Out
;Pinball.c,184 :: 		}
L_end_GameOver:
0x02D1	0x0008      	RETURN
; end of _GameOver
_check_ball:
;Pinball.c,234 :: 		void check_ball() {
;Pinball.c,235 :: 		if(!(PORTC & 0x20)){
0x02D2	0x1283      	BCF        STATUS, 5
0x02D3	0x1303      	BCF        STATUS, 6
0x02D4	0x1A87      	BTFSC      PORTC, 5
0x02D5	0x2B04      	GOTO       L_check_ball40
;Pinball.c,236 :: 		Delay_ms(500);
0x02D6	0x3006      	MOVLW      6
0x02D7	0x00FB      	MOVWF      R11
0x02D8	0x3013      	MOVLW      19
0x02D9	0x00FC      	MOVWF      R12
0x02DA	0x30AD      	MOVLW      173
0x02DB	0x00FD      	MOVWF      R13
L_check_ball41:
0x02DC	0x0BFD      	DECFSZ     R13, 1
0x02DD	0x2ADC      	GOTO       L_check_ball41
0x02DE	0x0BFC      	DECFSZ     R12, 1
0x02DF	0x2ADC      	GOTO       L_check_ball41
0x02E0	0x0BFB      	DECFSZ     R11, 1
0x02E1	0x2ADC      	GOTO       L_check_ball41
0x02E2	0x0000      	NOP
0x02E3	0x0000      	NOP
;Pinball.c,237 :: 		for(j = 0 ; j < 2 ; j++){
0x02E4	0x01CA      	CLRF       _j
0x02E5	0x01CB      	CLRF       _j+1
L_check_ball42:
0x02E6	0x3080      	MOVLW      128
0x02E7	0x064B      	XORWF      _j+1, 0
0x02E8	0x00F0      	MOVWF      R0
0x02E9	0x3080      	MOVLW      128
0x02EA	0x0270      	SUBWF      R0, 0
0x02EB	0x1D03      	BTFSS      STATUS, 2
0x02EC	0x2AEF      	GOTO       L__check_ball73
0x02ED	0x3002      	MOVLW      2
0x02EE	0x024A      	SUBWF      _j, 0
L__check_ball73:
0x02EF	0x1803      	BTFSC      STATUS, 0
0x02F0	0x2B04      	GOTO       L_check_ball43
;Pinball.c,238 :: 		set_servo_position1(60);
0x02F1	0x303C      	MOVLW      60
0x02F2	0x00E4      	MOVWF      FARG_set_servo_position1_degrees
0x02F3	0x3000      	MOVLW      0
0x02F4	0x00E5      	MOVWF      FARG_set_servo_position1_degrees+1
0x02F5	0x21AD      	CALL       _set_servo_position1
;Pinball.c,239 :: 		checkSensors();
0x02F6	0x224B      	CALL       _checkSensors
;Pinball.c,240 :: 		Delay_us(250);
0x02F7	0x30A6      	MOVLW      166
0x02F8	0x00FD      	MOVWF      R13
L_check_ball45:
0x02F9	0x0BFD      	DECFSZ     R13, 1
0x02FA	0x2AF9      	GOTO       L_check_ball45
0x02FB	0x0000      	NOP
;Pinball.c,241 :: 		set_servo_position1(0);
0x02FC	0x01E4      	CLRF       FARG_set_servo_position1_degrees
0x02FD	0x01E5      	CLRF       FARG_set_servo_position1_degrees+1
0x02FE	0x21AD      	CALL       _set_servo_position1
;Pinball.c,242 :: 		checkSensors();
0x02FF	0x224B      	CALL       _checkSensors
;Pinball.c,237 :: 		for(j = 0 ; j < 2 ; j++){
0x0300	0x0ACA      	INCF       _j, 1
0x0301	0x1903      	BTFSC      STATUS, 2
0x0302	0x0ACB      	INCF       _j+1, 1
;Pinball.c,243 :: 		}
0x0303	0x2AE6      	GOTO       L_check_ball42
L_check_ball43:
;Pinball.c,244 :: 		}
L_check_ball40:
;Pinball.c,246 :: 		if(!(PORTC & 0x10)){
0x0304	0x1A07      	BTFSC      PORTC, 4
0x0305	0x2B34      	GOTO       L_check_ball46
;Pinball.c,247 :: 		Delay_ms(500);
0x0306	0x3006      	MOVLW      6
0x0307	0x00FB      	MOVWF      R11
0x0308	0x3013      	MOVLW      19
0x0309	0x00FC      	MOVWF      R12
0x030A	0x30AD      	MOVLW      173
0x030B	0x00FD      	MOVWF      R13
L_check_ball47:
0x030C	0x0BFD      	DECFSZ     R13, 1
0x030D	0x2B0C      	GOTO       L_check_ball47
0x030E	0x0BFC      	DECFSZ     R12, 1
0x030F	0x2B0C      	GOTO       L_check_ball47
0x0310	0x0BFB      	DECFSZ     R11, 1
0x0311	0x2B0C      	GOTO       L_check_ball47
0x0312	0x0000      	NOP
0x0313	0x0000      	NOP
;Pinball.c,248 :: 		for(k = 0 ; k < 2 ; k++){
0x0314	0x01CC      	CLRF       _k
0x0315	0x01CD      	CLRF       _k+1
L_check_ball48:
0x0316	0x3080      	MOVLW      128
0x0317	0x064D      	XORWF      _k+1, 0
0x0318	0x00F0      	MOVWF      R0
0x0319	0x3080      	MOVLW      128
0x031A	0x0270      	SUBWF      R0, 0
0x031B	0x1D03      	BTFSS      STATUS, 2
0x031C	0x2B1F      	GOTO       L__check_ball74
0x031D	0x3002      	MOVLW      2
0x031E	0x024C      	SUBWF      _k, 0
L__check_ball74:
0x031F	0x1803      	BTFSC      STATUS, 0
0x0320	0x2B34      	GOTO       L_check_ball49
;Pinball.c,249 :: 		set_servo_position2(0);
0x0321	0x01E4      	CLRF       FARG_set_servo_position2_degrees
0x0322	0x01E5      	CLRF       FARG_set_servo_position2_degrees+1
0x0323	0x21FC      	CALL       _set_servo_position2
;Pinball.c,250 :: 		checkSensors();
0x0324	0x224B      	CALL       _checkSensors
;Pinball.c,251 :: 		Delay_us(250);
0x0325	0x30A6      	MOVLW      166
0x0326	0x00FD      	MOVWF      R13
L_check_ball51:
0x0327	0x0BFD      	DECFSZ     R13, 1
0x0328	0x2B27      	GOTO       L_check_ball51
0x0329	0x0000      	NOP
;Pinball.c,252 :: 		set_servo_position2(60);
0x032A	0x303C      	MOVLW      60
0x032B	0x00E4      	MOVWF      FARG_set_servo_position2_degrees
0x032C	0x3000      	MOVLW      0
0x032D	0x00E5      	MOVWF      FARG_set_servo_position2_degrees+1
0x032E	0x21FC      	CALL       _set_servo_position2
;Pinball.c,253 :: 		checkSensors();
0x032F	0x224B      	CALL       _checkSensors
;Pinball.c,248 :: 		for(k = 0 ; k < 2 ; k++){
0x0330	0x0ACC      	INCF       _k, 1
0x0331	0x1903      	BTFSC      STATUS, 2
0x0332	0x0ACD      	INCF       _k+1, 1
;Pinball.c,254 :: 		}
0x0333	0x2B16      	GOTO       L_check_ball48
L_check_ball49:
;Pinball.c,255 :: 		}
L_check_ball46:
;Pinball.c,256 :: 		}
L_end_check_ball:
0x0334	0x0008      	RETURN
; end of _check_ball
_EEPROM_Read:
;__Lib_EEPROM.c,4 :: 		
;__Lib_EEPROM.c,5 :: 		
0x0335	0x1283      	BCF        STATUS, 5
0x0336	0x1303      	BCF        STATUS, 6
0x0337	0x0863      	MOVF       FARG_EEPROM_Read_Address, 0
0x0338	0x1703      	BSF        STATUS, 6
0x0339	0x008D      	MOVWF      EEADR
;__Lib_EEPROM.c,6 :: 		
0x033A	0x1683      	BSF        STATUS, 5
0x033B	0x138C      	BCF        EECON1, 7
;__Lib_EEPROM.c,12 :: 		
0x033C	0x140C      	BSF        EECON1, 0
;__Lib_EEPROM.c,13 :: 		
0x033D	0x1283      	BCF        STATUS, 5
0x033E	0x080C      	MOVF       EEDATA, 0
0x033F	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,14 :: 		
L_end_EEPROM_Read:
0x0340	0x0008      	RETURN
; end of _EEPROM_Read
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x0341	0x1683      	BSF        STATUS, 5
0x0342	0x1303      	BCF        STATUS, 6
0x0343	0x1288      	BCF        LCD_EN_Direction, BitPos(LCD_EN_Direction+0)
;__Lib_Lcd.c,87 :: 		
0x0344	0x1208      	BCF        LCD_RS_Direction, BitPos(LCD_RS_Direction+0)
;__Lib_Lcd.c,88 :: 		
0x0345	0x1008      	BCF        LCD_D4_Direction, BitPos(LCD_D4_Direction+0)
;__Lib_Lcd.c,89 :: 		
0x0346	0x1088      	BCF        LCD_D5_Direction, BitPos(LCD_D5_Direction+0)
;__Lib_Lcd.c,90 :: 		
0x0347	0x1108      	BCF        LCD_D6_Direction, BitPos(LCD_D6_Direction+0)
;__Lib_Lcd.c,91 :: 		
0x0348	0x1188      	BCF        LCD_D7_Direction, BitPos(LCD_D7_Direction+0)
;__Lib_Lcd.c,93 :: 		
0x0349	0x1283      	BCF        STATUS, 5
0x034A	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,94 :: 		
0x034B	0x1208      	BCF        LCD_RS, BitPos(LCD_RS+0)
;__Lib_Lcd.c,95 :: 		
0x034C	0x1188      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,96 :: 		
0x034D	0x1108      	BCF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,97 :: 		
0x034E	0x1088      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,98 :: 		
0x034F	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,100 :: 		
0x0350	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x0351	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x0352	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x0353	0x1488      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,106 :: 		
0x0354	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,107 :: 		
0x0355	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,108 :: 		
0x0356	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x0357	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,110 :: 		
0x0358	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x0359	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,113 :: 		
0x035A	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x035B	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,115 :: 		
0x035C	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x035D	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,118 :: 		
0x035E	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x035F	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,120 :: 		
0x0360	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x0361	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,124 :: 		
0x0362	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,125 :: 		
0x0363	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x0364	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,127 :: 		
0x0365	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x0366	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,131 :: 		
0x0367	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x0368	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,134 :: 		
0x0369	0x1088      	BCF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,135 :: 		
0x036A	0x1588      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,136 :: 		
0x036B	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,137 :: 		
0x036C	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x036D	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,139 :: 		
0x036E	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x036F	0x1188      	BCF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,143 :: 		
0x0370	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,144 :: 		
0x0371	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,145 :: 		
0x0372	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x0373	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,148 :: 		
0x0374	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,149 :: 		
0x0375	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,150 :: 		
0x0376	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x0377	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,152 :: 		
0x0378	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x0379	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,156 :: 		
0x037A	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x037B	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,159 :: 		
0x037C	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,160 :: 		
0x037D	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,161 :: 		
0x037E	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x037F	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,163 :: 		
0x0380	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x0381	0x1008      	BCF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,167 :: 		
0x0382	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,168 :: 		
0x0383	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x0384	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,171 :: 		
0x0385	0x1588      	BSF        LCD_D7, BitPos(LCD_D7+0)
;__Lib_Lcd.c,172 :: 		
0x0386	0x1508      	BSF        LCD_D6, BitPos(LCD_D6+0)
;__Lib_Lcd.c,173 :: 		
0x0387	0x1488      	BSF        LCD_D5, BitPos(LCD_D5+0)
;__Lib_Lcd.c,174 :: 		
0x0388	0x1408      	BSF        LCD_D4, BitPos(LCD_D4+0)
;__Lib_Lcd.c,175 :: 		
0x0389	0x1688      	BSF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,176 :: 		
0x038A	0x2003      	CALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x038B	0x1288      	BCF        LCD_EN, BitPos(LCD_EN+0)
;__Lib_Lcd.c,179 :: 		
0x038C	0x2006      	CALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x038D	0x1460      	BSF        __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0)
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x038E	0x0008      	RETURN
; end of _Lcd_Init
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x038F	0x22A9      	CALL       _____DoICP
0x0390	0x118A      	BCF        PCLATH, 3
0x0391	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0392	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0393	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x0394	0x0AD4      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0395	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0396	0x0AD5      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0397	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0398	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0399	0x2B8F      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x039A	0x0008      	RETURN
; end of ___CC2DW
_pwm_init:
;Pinball.c,204 :: 		void pwm_init() {
;Pinball.c,205 :: 		TRISC = TRISC & 0xF9; // Set RC2 pin as output
0x039B	0x30F9      	MOVLW      249
0x039C	0x1683      	BSF        STATUS, 5
0x039D	0x1303      	BCF        STATUS, 6
0x039E	0x0587      	ANDWF      TRISC, 1
;Pinball.c,208 :: 		CCP1CON = 0x0C; // Set CCP1M3 and CCP1M2 to 1, rest bits remain as they are
0x039F	0x300C      	MOVLW      12
0x03A0	0x1283      	BCF        STATUS, 5
0x03A1	0x0097      	MOVWF      CCP1CON
;Pinball.c,211 :: 		CCP2CON = 0x0C;
0x03A2	0x300C      	MOVLW      12
0x03A3	0x009D      	MOVWF      CCP2CON
;Pinball.c,213 :: 		T2CON = T2CON | 0x07;// Set T2CKPS1, T2CKPS0, and TMR2ON to 1
0x03A4	0x3007      	MOVLW      7
0x03A5	0x0492      	IORWF      T2CON, 1
;Pinball.c,215 :: 		PR2 = 249; // Set period register for 50Hz frequency
0x03A6	0x30F9      	MOVLW      249
0x03A7	0x1683      	BSF        STATUS, 5
0x03A8	0x0092      	MOVWF      PR2
;Pinball.c,216 :: 		}
L_end_pwm_init:
0x03A9	0x0008      	RETURN
; end of _pwm_init
_main:
0x03AA	0x246C      	CALL       1132
;Pinball.c,42 :: 		void main() {
;Pinball.c,45 :: 		TRISB = 0x07; // Initialize PORTB as inputs for the IR sensors
0x03AB	0x3007      	MOVLW      7
0x03AC	0x1683      	BSF        STATUS, 5
0x03AD	0x1303      	BCF        STATUS, 6
0x03AE	0x0086      	MOVWF      TRISB
;Pinball.c,46 :: 		TRISD = 0x00;// Initialize PORTD as outputs for the LCD
0x03AF	0x0188      	CLRF       TRISD
;Pinball.c,47 :: 		Lcd_Init(); // Initialize LCD
0x03B0	0x2341      	CALL       _Lcd_Init
;Pinball.c,51 :: 		TRISC = 0xFF; // Set PORTC as input
0x03B1	0x30FF      	MOVLW      255
0x03B2	0x1683      	BSF        STATUS, 5
0x03B3	0x0087      	MOVWF      TRISC
;Pinball.c,52 :: 		pwm_init(); // Initialize PWM module
0x03B4	0x239B      	CALL       _pwm_init
;Pinball.c,53 :: 		PORTC = 0x00; // Clear PORTC
0x03B5	0x1283      	BCF        STATUS, 5
0x03B6	0x0187      	CLRF       PORTC
;Pinball.c,55 :: 		Delay_ms(100);// Delay to let system stabilize
0x03B7	0x3002      	MOVLW      2
0x03B8	0x00FB      	MOVWF      R11
0x03B9	0x3004      	MOVLW      4
0x03BA	0x00FC      	MOVWF      R12
0x03BB	0x30BA      	MOVLW      186
0x03BC	0x00FD      	MOVWF      R13
L_main0:
0x03BD	0x0BFD      	DECFSZ     R13, 1
0x03BE	0x2BBD      	GOTO       L_main0
0x03BF	0x0BFC      	DECFSZ     R12, 1
0x03C0	0x2BBD      	GOTO       L_main0
0x03C1	0x0BFB      	DECFSZ     R11, 1
0x03C2	0x2BBD      	GOTO       L_main0
0x03C3	0x0000      	NOP
;Pinball.c,58 :: 		previousState1 = PORTB & 0x01;
0x03C4	0x3001      	MOVLW      1
0x03C5	0x0506      	ANDWF      PORTB, 0
0x03C6	0x00D3      	MOVWF      _previousState1
;Pinball.c,59 :: 		previousState2 = (PORTB >> 1) & 0x01;
0x03C7	0x0806      	MOVF       PORTB, 0
0x03C8	0x00DF      	MOVWF      _previousState2
0x03C9	0x0CDF      	RRF        _previousState2, 1
0x03CA	0x13DF      	BCF        _previousState2, 7
0x03CB	0x3001      	MOVLW      1
0x03CC	0x05DF      	ANDWF      _previousState2, 1
;Pinball.c,60 :: 		previousState3 = (PORTB >> 2) & 0x01;
0x03CD	0x0806      	MOVF       PORTB, 0
0x03CE	0x00DE      	MOVWF      _previousState3
0x03CF	0x0CDE      	RRF        _previousState3, 1
0x03D0	0x13DE      	BCF        _previousState3, 7
0x03D1	0x0CDE      	RRF        _previousState3, 1
0x03D2	0x13DE      	BCF        _previousState3, 7
0x03D3	0x3001      	MOVLW      1
0x03D4	0x05DE      	ANDWF      _previousState3, 1
;Pinball.c,62 :: 		highScore = (EEPROM_Read(0x00) << 8) | EEPROM_Read(0x01);
0x03D5	0x01E3      	CLRF       FARG_EEPROM_Read_Address
0x03D6	0x2335      	CALL       _EEPROM_Read
0x03D7	0x0870      	MOVF       R0, 0
0x03D8	0x1303      	BCF        STATUS, 6
0x03D9	0x00E2      	MOVWF      FLOC__main+1
0x03DA	0x01E1      	CLRF       FLOC__main
0x03DB	0x3001      	MOVLW      1
0x03DC	0x00E3      	MOVWF      FARG_EEPROM_Read_Address
0x03DD	0x2335      	CALL       _EEPROM_Read
0x03DE	0x0870      	MOVF       R0, 0
0x03DF	0x1303      	BCF        STATUS, 6
0x03E0	0x0461      	IORWF      FLOC__main, 0
0x03E1	0x00D1      	MOVWF      _highScore
0x03E2	0x0862      	MOVF       FLOC__main+1, 0
0x03E3	0x00D2      	MOVWF      _highScore+1
0x03E4	0x3000      	MOVLW      0
0x03E5	0x04D2      	IORWF      _highScore+1, 1
;Pinball.c,63 :: 		updateLCD();// Display initial score
0x03E6	0x217D      	CALL       _updateLCD
;Pinball.c,64 :: 		set_servo_position1(0);
0x03E7	0x01E4      	CLRF       FARG_set_servo_position1_degrees
0x03E8	0x01E5      	CLRF       FARG_set_servo_position1_degrees+1
0x03E9	0x21AD      	CALL       _set_servo_position1
;Pinball.c,65 :: 		set_servo_position2(60);
0x03EA	0x303C      	MOVLW      60
0x03EB	0x00E4      	MOVWF      FARG_set_servo_position2_degrees
0x03EC	0x3000      	MOVLW      0
0x03ED	0x00E5      	MOVWF      FARG_set_servo_position2_degrees+1
0x03EE	0x21FC      	CALL       _set_servo_position2
;Pinball.c,66 :: 		while(1){
L_main1:
;Pinball.c,67 :: 		check_ball();
0x03EF	0x22D2      	CALL       _check_ball
;Pinball.c,68 :: 		checkSensors();
0x03F0	0x224B      	CALL       _checkSensors
;Pinball.c,69 :: 		temp3 = !(PORTC & 0x40);
0x03F1	0x3040      	MOVLW      64
0x03F2	0x0507      	ANDWF      PORTC, 0
0x03F3	0x00D6      	MOVWF      _temp3
0x03F4	0x01D7      	CLRF       _temp3+1
0x03F5	0x3000      	MOVLW      0
0x03F6	0x05D7      	ANDWF      _temp3+1, 1
0x03F7	0x0856      	MOVF       _temp3, 0
0x03F8	0x3001      	MOVLW      1
0x03F9	0x1D03      	BTFSS      STATUS, 2
0x03FA	0x3000      	MOVLW      0
0x03FB	0x00D6      	MOVWF      _temp3
0x03FC	0x00D7      	MOVWF      _temp3+1
0x03FD	0x3000      	MOVLW      0
0x03FE	0x00D7      	MOVWF      _temp3+1
;Pinball.c,70 :: 		if(temp3){
0x03FF	0x0856      	MOVF       _temp3, 0
0x0400	0x0457      	IORWF      _temp3+1, 0
0x0401	0x1903      	BTFSC      STATUS, 2
0x0402	0x2C27      	GOTO       L_main3
;Pinball.c,71 :: 		while(temp3){
L_main4:
0x0403	0x0856      	MOVF       _temp3, 0
0x0404	0x0457      	IORWF      _temp3+1, 0
0x0405	0x1903      	BTFSC      STATUS, 2
0x0406	0x2C25      	GOTO       L_main5
;Pinball.c,72 :: 		GameOver();
0x0407	0x22B0      	CALL       _GameOver
;Pinball.c,73 :: 		Delay_ms(1000);
0x0408	0x300B      	MOVLW      11
0x0409	0x00FB      	MOVWF      R11
0x040A	0x3026      	MOVLW      38
0x040B	0x00FC      	MOVWF      R12
0x040C	0x305D      	MOVLW      93
0x040D	0x00FD      	MOVWF      R13
L_main6:
0x040E	0x0BFD      	DECFSZ     R13, 1
0x040F	0x2C0E      	GOTO       L_main6
0x0410	0x0BFC      	DECFSZ     R12, 1
0x0411	0x2C0E      	GOTO       L_main6
0x0412	0x0BFB      	DECFSZ     R11, 1
0x0413	0x2C0E      	GOTO       L_main6
0x0414	0x0000      	NOP
0x0415	0x0000      	NOP
;Pinball.c,74 :: 		temp3 = !(PORTC & 0x40);
0x0416	0x3040      	MOVLW      64
0x0417	0x0507      	ANDWF      PORTC, 0
0x0418	0x00D6      	MOVWF      _temp3
0x0419	0x01D7      	CLRF       _temp3+1
0x041A	0x3000      	MOVLW      0
0x041B	0x05D7      	ANDWF      _temp3+1, 1
0x041C	0x0856      	MOVF       _temp3, 0
0x041D	0x3001      	MOVLW      1
0x041E	0x1D03      	BTFSS      STATUS, 2
0x041F	0x3000      	MOVLW      0
0x0420	0x00D6      	MOVWF      _temp3
0x0421	0x00D7      	MOVWF      _temp3+1
0x0422	0x3000      	MOVLW      0
0x0423	0x00D7      	MOVWF      _temp3+1
;Pinball.c,75 :: 		}
0x0424	0x2C03      	GOTO       L_main4
L_main5:
;Pinball.c,76 :: 		currentScore = 0;
0x0425	0x01A0      	CLRF       _currentScore
0x0426	0x01A1      	CLRF       _currentScore+1
;Pinball.c,77 :: 		}
L_main3:
;Pinball.c,78 :: 		Delay_ms(100);
0x0427	0x3002      	MOVLW      2
0x0428	0x00FB      	MOVWF      R11
0x0429	0x3004      	MOVLW      4
0x042A	0x00FC      	MOVWF      R12
0x042B	0x30BA      	MOVLW      186
0x042C	0x00FD      	MOVWF      R13
L_main7:
0x042D	0x0BFD      	DECFSZ     R13, 1
0x042E	0x2C2D      	GOTO       L_main7
0x042F	0x0BFC      	DECFSZ     R12, 1
0x0430	0x2C2D      	GOTO       L_main7
0x0431	0x0BFB      	DECFSZ     R11, 1
0x0432	0x2C2D      	GOTO       L_main7
0x0433	0x0000      	NOP
;Pinball.c,79 :: 		}
0x0434	0x2BEF      	GOTO       L_main1
;Pinball.c,80 :: 		}
L_end_main:
0x0435	0x2C35      	GOTO       $+0
; end of _main
0x046C	0x3020      	MOVLW      32
0x046D	0x0084      	MOVWF      FSR
0x046E	0x3031      	MOVLW      49
0x046F	0x1283      	BCF        STATUS, 5
0x0470	0x1303      	BCF        STATUS, 6
0x0471	0x00F0      	MOVWF      R0
0x0472	0x303B      	MOVLW      59
0x0473	0x00D4      	MOVWF      ___DoICPAddr
0x0474	0x3004      	MOVLW      4
0x0475	0x00D5      	MOVWF      85
0x0476	0x238F      	CALL       911
0x0477	0x0008      	RETURN
;Pinball.c,0 :: ?ICS_currentScore
0x043B	0x3400 ;?ICS_currentScore+0
0x043C	0x3400 ;?ICS_currentScore+1
; end of ?ICS_currentScore
;Pinball.c,0 :: ?ICS?lstr1_Pinball
0x043D	0x3453 ;?ICS?lstr1_Pinball+0
0x043E	0x3463 ;?ICS?lstr1_Pinball+1
0x043F	0x346F ;?ICS?lstr1_Pinball+2
0x0440	0x3472 ;?ICS?lstr1_Pinball+3
0x0441	0x3465 ;?ICS?lstr1_Pinball+4
0x0442	0x343A ;?ICS?lstr1_Pinball+5
0x0443	0x3420 ;?ICS?lstr1_Pinball+6
0x0444	0x3400 ;?ICS?lstr1_Pinball+7
; end of ?ICS?lstr1_Pinball
;Pinball.c,0 :: ?ICS?lstr2_Pinball
0x0445	0x3448 ;?ICS?lstr2_Pinball+0
0x0446	0x3469 ;?ICS?lstr2_Pinball+1
0x0447	0x3467 ;?ICS?lstr2_Pinball+2
0x0448	0x3468 ;?ICS?lstr2_Pinball+3
0x0449	0x3420 ;?ICS?lstr2_Pinball+4
0x044A	0x3453 ;?ICS?lstr2_Pinball+5
0x044B	0x3463 ;?ICS?lstr2_Pinball+6
0x044C	0x346F ;?ICS?lstr2_Pinball+7
0x044D	0x3472 ;?ICS?lstr2_Pinball+8
0x044E	0x3465 ;?ICS?lstr2_Pinball+9
0x044F	0x343A ;?ICS?lstr2_Pinball+10
0x0450	0x3420 ;?ICS?lstr2_Pinball+11
0x0451	0x3400 ;?ICS?lstr2_Pinball+12
; end of ?ICS?lstr2_Pinball
;Pinball.c,0 :: ?ICS?lstr4_Pinball
0x0452	0x3453 ;?ICS?lstr4_Pinball+0
0x0453	0x3463 ;?ICS?lstr4_Pinball+1
0x0454	0x346F ;?ICS?lstr4_Pinball+2
0x0455	0x3472 ;?ICS?lstr4_Pinball+3
0x0456	0x3465 ;?ICS?lstr4_Pinball+4
0x0457	0x343A ;?ICS?lstr4_Pinball+5
0x0458	0x3420 ;?ICS?lstr4_Pinball+6
0x0459	0x3400 ;?ICS?lstr4_Pinball+7
; end of ?ICS?lstr4_Pinball
;Pinball.c,0 :: ?ICS?lstr3_Pinball
0x045A	0x3447 ;?ICS?lstr3_Pinball+0
0x045B	0x3441 ;?ICS?lstr3_Pinball+1
0x045C	0x344D ;?ICS?lstr3_Pinball+2
0x045D	0x3445 ;?ICS?lstr3_Pinball+3
0x045E	0x3420 ;?ICS?lstr3_Pinball+4
0x045F	0x344F ;?ICS?lstr3_Pinball+5
0x0460	0x3456 ;?ICS?lstr3_Pinball+6
0x0461	0x3445 ;?ICS?lstr3_Pinball+7
0x0462	0x3452 ;?ICS?lstr3_Pinball+8
0x0463	0x3421 ;?ICS?lstr3_Pinball+9
0x0464	0x3400 ;?ICS?lstr3_Pinball+10
; end of ?ICS?lstr3_Pinball
;Pinball.c,0 :: ?ICS_j
0x0465	0x3400 ;?ICS_j+0
0x0466	0x3400 ;?ICS_j+1
; end of ?ICS_j
;Pinball.c,0 :: ?ICS_k
0x0467	0x3400 ;?ICS_k+0
0x0468	0x3400 ;?ICS_k+1
; end of ?ICS_k
;Pinball.c,0 :: ?ICScheckSensors_count1_L0
0x0469	0x3400 ;?ICScheckSensors_count1_L0+0
; end of ?ICScheckSensors_count1_L0
;Pinball.c,0 :: ?ICScheckSensors_count2_L0
0x046A	0x3400 ;?ICScheckSensors_count2_L0+0
; end of ?ICScheckSensors_count2_L0
;Pinball.c,0 :: ?ICScheckSensors_count3_L0
0x046B	0x3400 ;?ICScheckSensors_count3_L0+0
; end of ?ICScheckSensors_count3_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [3]    _Delay_1us
0x0006      [13]    _Delay_5500us
0x0013       [7]    _Delay_50us
0x001A      [87]    _Lcd_Cmd
0x0071       [9]    _Lcd_Chr_CP
0x007A      [29]    _Div_16X16_U
0x0097     [131]    _intToStr
0x011A      [66]    _Lcd_Out
0x015C      [33]    _EEPROM_Write
0x017D      [48]    _updateLCD
0x01AD      [79]    _set_servo_position1
0x01FC      [79]    _set_servo_position2
0x024B      [94]    _checkSensors
0x02A9       [7]    _____DoICP
0x02B0      [34]    _GameOver
0x02D2      [99]    _check_ball
0x0335      [12]    _EEPROM_Read
0x0341      [78]    _Lcd_Init
0x038F      [12]    ___CC2DW
0x039B      [15]    _pwm_init
0x03AA     [139]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [0]    LCD_D7
0x0008       [0]    RD3_bit
0x0008       [0]    RD2_bit
0x0008       [0]    RD4_bit
0x0008       [0]    RD5_bit
0x0008       [0]    LCD_D4
0x0008       [0]    LCD_EN
0x0008       [0]    LCD_RS
0x0008       [0]    RD1_bit
0x0008       [0]    LCD_D5
0x0008       [0]    LCD_D6
0x0008       [0]    RD0_bit
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x001B       [1]    CCPR2L
0x001D       [1]    CCP2CON
0x0020       [2]    _currentScore
0x0022       [8]    ?lstr1_Pinball
0x002A      [13]    ?lstr2_Pinball
0x0037       [8]    ?lstr4_Pinball
0x003F      [11]    ?lstr3_Pinball
0x004A       [2]    _j
0x004C       [2]    _k
0x004E       [1]    checkSensors_count1_L0
0x004F       [1]    checkSensors_count2_L0
0x0050       [1]    checkSensors_count3_L0
0x0051       [2]    _highScore
0x0053       [1]    _previousState1
0x0054       [2]    ___DoICPAddr
0x0056       [2]    _temp3
0x0058       [6]    _finalScore
0x005E       [1]    _previousState3
0x005F       [1]    _previousState2
0x0060       [0]    __Lib_Lcd_cmd_status
0x0061       [2]    FLOC__main
0x0063       [1]    FARG_EEPROM_Read_Address
0x0064       [2]    FARG_set_servo_position1_degrees
0x0064       [2]    FARG_set_servo_position2_degrees
0x0066       [6]    updateLCD_scoreStr_L0
0x0066       [1]    FARG_EEPROM_Write_Address
0x0067       [1]    FARG_EEPROM_Write_data_
0x006C       [2]    FARG_intToStr_num
0x006C       [1]    FARG_Lcd_Out_row
0x006D       [1]    FARG_Lcd_Out_column
0x006E       [1]    FARG_Lcd_Out_text
0x006E       [1]    FARG_intToStr_str
0x006F       [1]    Lcd_Out_i_L0
0x006F       [1]    intToStr_temp_L1
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [0]    TRISD5_bit
0x0088       [0]    TRISD4_bit
0x0088       [0]    TRISD1_bit
0x0088       [0]    TRISD2_bit
0x0088       [0]    TRISD3_bit
0x0088       [0]    LCD_RS_Direction
0x0088       [0]    LCD_D5_Direction
0x0088       [0]    LCD_D4_Direction
0x0088       [1]    TRISD
0x0088       [0]    LCD_D6_Direction
0x0088       [0]    LCD_EN_Direction
0x0088       [0]    LCD_D7_Direction
0x0088       [0]    TRISD0_bit
0x0092       [1]    PR2
0x00A0       [6]    updateLCD_highScoreStr_L0
0x00A6       [2]    intToStr_j_L0
0x00A8       [2]    intToStr_i_L0
0x00AA       [1]    FLOC__intToStr
0x00AB       [1]    FARG_Lcd_Chr_CP_out_char
0x00AC       [1]    FARG_Lcd_Cmd_out_char
0x010C       [1]    EEDATA
0x010D       [1]    EEADR
0x018C       [1]    EECON1
0x018D       [1]    EECON2
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x043B       [2]    ?ICS_currentScore
0x043D       [8]    ?ICS?lstr1_Pinball
0x0445      [13]    ?ICS?lstr2_Pinball
0x0452       [8]    ?ICS?lstr4_Pinball
0x045A      [11]    ?ICS?lstr3_Pinball
0x0465       [2]    ?ICS_j
0x0467       [2]    ?ICS_k
0x0469       [1]    ?ICScheckSensors_count1_L0
0x046A       [1]    ?ICScheckSensors_count2_L0
0x046B       [1]    ?ICScheckSensors_count3_L0
